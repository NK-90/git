새로운 기능을 개발할 때 Git으로 버전 관리하기 


새로운 기능을 개발하기 위해 `feature/cam-app` 브랜치를 생성하고 작업을 
진행하는 방법을 단계별로 설명하겠습니다.

### 1. 새로운 브랜치 생성

새로운 기능을 개발하기 위해 `feature/cam-app` 브랜치를 생성합니다. 
이 브랜치는 `main` 브랜치로부터 파생됩니다.

```bash
git checkout main          # main 브랜치로 이동
git pull origin main       # 최신 변경 사항을 가져와서 로컬 main 브랜치를 업데이트
git checkout -b feature/cam-app  # 새로운 브랜치 생성 및 이동
```

### 2. 기능 개발

이제 `feature/cam-app` 브랜치에서 새로운 기능을 개발합니다. 
코드를 수정하고 변경 사항을 커밋합니다.

```bash
# 파일 수정 후 변경 사항 스테이징
git add .

# 변경 사항 커밋
git commit -m "Add initial camera feature implementation"
```

### 3. 주기적으로 변경 사항 푸시

작업을 진행하면서 주기적으로 변경 사항을 원격 리포지토리로 푸시하여 백업하고, 
다른 팀원들과 공유할 수 있도록 합니다.

```bash
git push origin feature/cam-app
```

### 4. 코드 리뷰 및 병합 준비

기능 개발이 완료되면, Pull Request (PR)를 생성하여 코드 리뷰를 요청합니다. 
GitHub에서 PR을 생성하고, 팀원들의 피드백을 받을 수 있습니다.

### 5. 병합 및 브랜치 정리

코드 리뷰가 완료되고 PR이 승인되면, `feature/cam-app` 브랜치를 `main` 브랜치에 병합합니다. 
병합 후에는 필요하지 않은 브랜치를 정리합니다.

```bash
git checkout main
git pull origin main       # 최신 상태로 업데이트
git merge feature/cam-app  # 기능 브랜치 병합
git push origin main       # 병합된 변경 사항 푸시

# 로컬 및 원격에서 기능 브랜치 삭제
git branch -d feature/cam-app
git push origin --delete feature/cam-app
```

이 과정을 통해 새로운 기능을 체계적으로 개발하고 관리할 수 있습니다. 
각 단계에서 변경 사항을 커밋하고 푸시하여 작업을 안전하게 관리하세요. 
